/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package file.launcher;
import java.awt.Desktop;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
/**
 *
 * @author Aaron Maynard
 */
public class Interface extends javax.swing.JFrame {
    private static int NUMBEROFAPPS;
    public static long BYTES;
    private static String LIST = (System.getProperty("user.home") + "\\FileLauncher\\programs.txt");
    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        MenuBar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Scan = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        Search = new javax.swing.JMenuItem();
        Add = new javax.swing.JMenuItem();
        Remove = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        RemoveAll = new javax.swing.JMenuItem();
        View = new javax.swing.JMenu();
        Summary = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 0));

        jList1.setMaximumSize(new java.awt.Dimension(250, 0));
        jList1.setMinimumSize(new java.awt.Dimension(150, 0));
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        jList3.setMaximumSize(new java.awt.Dimension(100, 0));
        jList3.setMinimumSize(new java.awt.Dimension(100, 0));
        jList3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jList3);

        File.setText("File");

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        Scan.setText("Scan");
        Scan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScanActionPerformed(evt);
            }
        });
        File.add(Scan);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        MenuBar.add(File);

        Edit.setText("Edit");

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        Edit.add(Search);

        Add.setText("Add File");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        Edit.add(Add);

        Remove.setText("Remove File");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });
        Edit.add(Remove);
        Edit.add(jSeparator1);

        RemoveAll.setText("Remove All");
        RemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveAllActionPerformed(evt);
            }
        });
        Edit.add(RemoveAll);

        MenuBar.add(Edit);

        View.setText("View");

        Summary.setText("Summary");
        Summary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SummaryActionPerformed(evt);
            }
        });
        View.add(Summary);

        MenuBar.add(View);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // Exits the program
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void ScanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScanActionPerformed
        // Scan the source file for the application info
        scan();
    }//GEN-LAST:event_ScanActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // Adds a program to the application list
        String newPath = null;
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fc.showOpenDialog(Open);
        if (result == JFileChooser.APPROVE_OPTION) {
            // user selects a file       	
            File selectedFile = fc.getSelectedFile();
            newPath = selectedFile.getAbsolutePath();
        }
        try {
            Files.write(Paths.get(LIST), (newPath + "\n").getBytes(), StandardOpenOption.APPEND);
        }catch (IOException e) {
            //exception handling left as an exercise for the reader
        }
        System.out.println("Added" + newPath);
        // Rescans the document and updates the JLists
        scan();
    }//GEN-LAST:event_AddActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        // Removes the selected Program
        int delete = (int) jList1.getSelectedIndex();
        String lineToDelete = jList2.getModel().getElementAt(delete);
        // Remove the item from the file
        System.out.println("Deleted " + jList2.getModel().getElementAt(delete));
        File inputFile = new File(LIST);
        File tempFile = new File(LIST + ".temp");

        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(inputFile));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter(tempFile));
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }

        String lineToRemove = lineToDelete;
        String currentLine;

        try {
            while((currentLine = reader.readLine()) != null) {
                // trim newline when comparing with lineToRemove
                String trimmedLine = currentLine.trim();
                if(trimmedLine.equals(lineToRemove)) continue;
                writer.write(currentLine + System.getProperty("line.separator"));
            }
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        try { 
            writer.close();
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        try { 
            reader.close();
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        Path path = Paths.get(LIST);
        try {
            Files.delete(path);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        boolean successful = tempFile.renameTo(inputFile);
        
        // Remove the item from the JList
        ((DefaultListModel) jList1.getModel()).removeElementAt(delete);
        ((DefaultListModel) jList2.getModel()).removeElementAt(delete);
        ((DefaultListModel) jList3.getModel()).removeElementAt(delete);        
    }//GEN-LAST:event_RemoveActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // Syncs the index of the selected JList
        int selector;
        if(!jList1.isSelectionEmpty()){
            selector = (int) jList1.getSelectedIndex();
            jList2.setSelectedIndex(selector);
            jList3.setSelectedIndex(selector);
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
        // Syncs the index of the selected JList
        int selector;
        if(!jList2.isSelectionEmpty()){
            selector = (int) jList2.getSelectedIndex();
            jList1.setSelectedIndex(selector);
            jList3.setSelectedIndex(selector);
        }
    }//GEN-LAST:event_jList2MouseClicked

    private void jList3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList3MouseClicked
        // Syncs the index of the selected JList
        int selector;
        if(!jList3.isSelectionEmpty()){
            selector = (int) jList3.getSelectedIndex();
            jList1.setSelectedIndex(selector);
            jList2.setSelectedIndex(selector);
        }
    }//GEN-LAST:event_jList3MouseClicked

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        try {
            // Runs the selected program
            String path = jList2.getSelectedValue();
            File file = new File(path);
            Desktop.getDesktop().open(file);
        } catch (Exception ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            JFrame parent = new JFrame();
            JOptionPane.showMessageDialog(parent, "Please 'scan' beore using this function.");
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // Highlights a selected JList item based on String
        JFrame frame = new JFrame();
        Object result = JOptionPane.showInputDialog(frame, "Search for a file:");

        System.out.println(result);
        String compare = result.toString();
        int index = 0;
        boolean found = false;
        for(int i = 0; i < jList1.getModel().getSize(); i++){
            if(jList1.getModel().getElementAt(i).toString().toLowerCase().contains(compare.toLowerCase())){
                System.out.println("Match found");
                found = true;
                index = i;
                break;
            }
        }
        if(found){
            jList1.setSelectedIndex(index);
            jList2.setSelectedIndex(index);
            jList3.setSelectedIndex(index);
        }else if(!found){
            System.out.println("No match found");
        }else{
            System.out.println("Something went wrong...");
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void RemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveAllActionPerformed
        // Clears the JLists
        boolean delete = false;
        JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove all items from the list?", "Confirm",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.NO_OPTION) {
          System.out.println("No button clicked");
        } else if (response == JOptionPane.YES_OPTION) {
          System.out.println("Yes button clicked");
          delete = true;
        } else if (response == JOptionPane.CLOSED_OPTION) {
          System.out.println("JOptionPane closed");
        }
        if(delete){
            PrintWriter writer;
            try {
                writer = new PrintWriter(LIST);
                writer.close();
                scan();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_RemoveAllActionPerformed

    private void SummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SummaryActionPerformed
        // Provides a summary of the items in the JList
        JFrame parent = new JFrame();
        JOptionPane.showMessageDialog(parent, "List Path: " + LIST
        + "\nNumber of Files: " + NUMBEROFAPPS
        + "\nTotal Size: " + BYTES + " bytes");
    }//GEN-LAST:event_SummaryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Interface().setVisible(true);
        });
    }
    
    public void scan(){
        try {
            // TODO add your handling code here:
            NUMBEROFAPPS = countLines() + 1;
            scanFile(LIST, NUMBEROFAPPS);
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static int countLines() throws IOException{
        // Check if file exists, if not, make it
        File file = new File(LIST);
        if (file.createNewFile()){
        System.out.println("File is created!");
        }else{
        System.out.println("File already exists.");
        }
        
        try (InputStream is = new BufferedInputStream(new FileInputStream(LIST))) {
            byte[] c = new byte[1024];
            int count = 0;
            int readChars = 0;
            boolean empty = true;
            while ((readChars = is.read(c)) != -1) {
                empty = false;
                for (int i = 0; i < readChars; ++i) {
                    if (c[i] == '\n') {
                        ++count;
                    }
                }
            }
            count--;
            return (count == 0 && !empty) ? 0 : count;
        }
    }
    
    public void scanFile(String fileName, int lines) throws IOException{
        List<String> list = Files.readAllLines(Paths.get(fileName), StandardCharsets.UTF_8);
        String[] a = list.toArray(new String[list.size()]); 
        System.out.println("Number of items: " + NUMBEROFAPPS);
        BYTES = 0;
        // Populate Application Array
        Applications[] apps = new Applications[NUMBEROFAPPS];
        for(int i = 0; i < NUMBEROFAPPS; i++){
            apps[i] = new Applications();
            apps[i].setName(a[i]);
            apps[i].setDir(a[i]);
            apps[i].setSize(a[i]);
            BYTES += apps[i].getSizeBits();
        }
        // Populate JLists
        DefaultListModel name = new DefaultListModel();
        for(int i = 0; i < apps.length; i++){
            name.addElement(apps[i].getName());
        }
        jList1.setModel(name);
        
        DefaultListModel dir = new DefaultListModel();
        for(int i = 0; i < apps.length; i++){
            dir.addElement(apps[i].getDir());
        }    
        jList2.setModel(dir);

        DefaultListModel size = new DefaultListModel();
        for(int i = 0; i < apps.length; i++){
            size.addElement(apps[i].getSize());
        }    
        jList3.setModel(size);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Add;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Remove;
    private javax.swing.JMenuItem RemoveAll;
    private javax.swing.JMenuItem Scan;
    private javax.swing.JMenuItem Search;
    private javax.swing.JMenuItem Summary;
    private javax.swing.JMenu View;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
